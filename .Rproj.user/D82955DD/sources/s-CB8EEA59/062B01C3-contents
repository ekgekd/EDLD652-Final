---
title: "Lab 1"
author: "Eliott Doyle, Diana DeWald"
date: "1/10/2022"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(dplyr)
library(tidyverse)
library(rio)
library(here)
library(knitr)
library(janitor)
library(edld652)
library(readr)
library(tidytext)
library(stringr)
```

```{r initial_exploration, warning = FALSE}

# downloaded rstats data manually from course repo
# reading the data into the environment using readr
tweets <- read_rds("rstats_tweets.rds", refhook = NULL)


# histogram of variable display_text_width column with bins = 10
ggplot(tweets, aes(x = display_text_width)) +
  geom_histogram(fill = "#1c8d83",
                 color = "white",
                 alpha = 0.7,
                 bins = 10) +
  theme_minimal() +
  labs(title = "Histogram of tweet text width with 10 bins", x = "text width")

# histogram of variable display_text_width column with bins = 25
ggplot(tweets, aes(x = display_text_width)) +
  geom_histogram(fill = "#23b3a7",
                 color = "white",
                 alpha = 0.7,
                 bins = 25) +
  theme_minimal() +
  labs(title = "Histogram of tweet text width with 25 bins", x = "text width")

# histogram of variable display_text_width column with bins = 50
ggplot(tweets, aes(x = display_text_width)) +
  geom_histogram(fill = "#2ad5c7",
                 color = "white",
                 alpha = 0.7,
                 bins = 50) +
  theme_minimal() +
  labs(title = "Histogram of tweet text width with 50 bins", x = "text width")

# histogram of variable display_text_width column with bins = 70
ggplot(tweets, aes(x = display_text_width)) +
  geom_histogram(fill = "#61e0d5",
                 color = "white",
                 alpha = 0.7,
                 bins = 70) +
  theme_minimal() +
  labs(title = "Histogram of tweet text width with 70 bins", x = "text width")


# We think that 50 bins represents the distribution of data sufficiently without being visually confusing or too small, so this is the number of bins we choose for a final histogram.




# density plot with bandwidth = 7
ggplot(tweets, aes(display_text_width)) +
  geom_density(fill = "#9f3a23", 
               bw = 7, alpha = 0.7) +
 theme_minimal() +
  labs(title = "Density plot of tweet text width with bandwidth = 7", x = "text width")


# density plot with bandwidth = 5
ggplot(tweets, aes(display_text_width)) +
  geom_density(fill = "#d24f32", 
               bw = 5, alpha = 0.7) +
 theme_minimal() +
  labs(title = "Density plot of tweet text width with bandwidth = 5", x = "text width")


# density plot with bandwidth = 2
ggplot(tweets, aes(display_text_width)) +
  geom_density(fill = "#dc7760", 
               bw = 2, alpha = 0.7) +
 theme_minimal() +
  labs(title = "Density plot of tweet text width with bandwidth = 2", x = "text width")


# density plot with bandwidth = 0.5
ggplot(tweets, aes(display_text_width)) +
  geom_density(fill = "#e39382", 
               bw = 0.5, alpha = 0.7) +
 theme_minimal() +
  labs(title = "Density plot of tweet text width with bandwidth = 0.5", x = "text width")


# A bandwidth of 2 appears to capture the density of the text width variable sufficiently. Even though a bandwidth of 0.2 is more granular, it depicts so many individual ridges that it makes the graph less visually pleasing and easy to read. So we choose a bandwidth of 2 for our density plot.

```



```{r look_for_plot}
# Converting all text to lowercase, creating a new column to display "yes" when a tweet contains the word "plot" and no if it does not
tweets <- tweets %>% 
  mutate(text = tolower(text),
         plot_yn = ifelse(str_detect(text, "plot"), "yes", "no"))
#View(tweets)

# Counting how many tweets have "yes" in the plot_yn column
plot_table <- tweets %>% 
  select(plot_yn) %>% 
  group_by(plot_yn) %>% 
  summarize(n=n()) %>% 
  mutate(percent = (n/sum(n)))
plot_table

# About 6.83% of the tweets in this dataset contain the word "plot"



# Lab 1 review code:
n_plot <- sum(grepl("plot", tolower(d$text)))
n_plot/nrow(d)
#or
paste0(round(n_plot/nrow(d)), 4) *100, "%")
```

```{r plot_rough_draft}
tweets <- read_rds("rstats_tweets.rds", refhook = NULL)

# turning the text of tweets into a simple data frame
tweets_df <- tibble(
  paragraph = seq_along(tweets$text),
  description = tweets$text
)

# breaking the tweets up into individual words
tidy_tweets <- tweets_df %>% 
  unnest_tokens(word, description)

# counting total words
tidy_tweets %>% 
  count(word, sort = TRUE)

# using stop words dataset and anti_join to get rid of common words

rough_draft <- tidy_tweets %>% 
  anti_join(stop_words) %>%
  count(word, sort = TRUE)


# we still need to remove a few rows containing individual words that aren't very informative (rstats, t.co, https, http, rt)

rough_draft <- rough_draft[-c(1, 2, 3, 4, 9), ]





# removing rows as covered in Lab1 review from lecture:
words_pd <- word %>%
  anti_join(stop_words %>%
              filter(!word %in% c("t.co", "https", "thhp", "rt", "rstats")) %>%
              count(word, sort = TRUE) %>%
              mutate(word = fct_reorder(word, n)) %>%
              slice(1:15)

            
            

# plotting the top 15 words
rough_draft %>% 
  mutate(word = reorder(word, n)) %>% 
  slice(1:15) %>% 
  ggplot(aes(n, word)) +
    geom_col()


```

```{r stylized_plot}
final_plot <- rough_draft %>% 
  mutate(word = reorder(word, n)) %>% 
  slice(1:15) %>% 
  ggplot(aes(n, word)) +
    geom_col(fill = "cornflowerblue", alpha = .8) +
  theme_bw() +
  theme(panel.grid.minor.y=element_blank(),
           panel.grid.major.y=element_blank(),
        panel.grid.minor.x=element_blank()) +
  labs(title = "Word frequencies in posts",
       subtitle = "Top 15 words displayed",
       x = "Count",
       y = "Word",
       caption = "Data from Mike Kearny, distributed via #tidytuesday")


final_plot
```
